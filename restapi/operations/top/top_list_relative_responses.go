// Code generated by go-swagger; DO NOT EDIT.

package top

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"ranking/models"
)

// TopListRelativeOKCode is the HTTP code returned for type TopListRelativeOK
const TopListRelativeOKCode int = 200

/*TopListRelativeOK List the top players relative to a position

swagger:response topListRelativeOK
*/
type TopListRelativeOK struct {

	/*
	  In: Body
	*/
	Payload models.PlayersList `json:"body,omitempty"`
}

// NewTopListRelativeOK creates TopListRelativeOK with default headers values
func NewTopListRelativeOK() *TopListRelativeOK {

	return &TopListRelativeOK{}
}

// WithPayload adds the payload to the top list relative o k response
func (o *TopListRelativeOK) WithPayload(payload models.PlayersList) *TopListRelativeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the top list relative o k response
func (o *TopListRelativeOK) SetPayload(payload models.PlayersList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TopListRelativeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.PlayersList{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// TopListRelativeBadRequestCode is the HTTP code returned for type TopListRelativeBadRequest
const TopListRelativeBadRequestCode int = 400

/*TopListRelativeBadRequest Bad Request

swagger:response topListRelativeBadRequest
*/
type TopListRelativeBadRequest struct {
}

// NewTopListRelativeBadRequest creates TopListRelativeBadRequest with default headers values
func NewTopListRelativeBadRequest() *TopListRelativeBadRequest {

	return &TopListRelativeBadRequest{}
}

// WriteResponse to the client
func (o *TopListRelativeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// TopListRelativeNotFoundCode is the HTTP code returned for type TopListRelativeNotFound
const TopListRelativeNotFoundCode int = 404

/*TopListRelativeNotFound Players Not Found

swagger:response topListRelativeNotFound
*/
type TopListRelativeNotFound struct {
}

// NewTopListRelativeNotFound creates TopListRelativeNotFound with default headers values
func NewTopListRelativeNotFound() *TopListRelativeNotFound {

	return &TopListRelativeNotFound{}
}

// WriteResponse to the client
func (o *TopListRelativeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// TopListRelativeInternalServerErrorCode is the HTTP code returned for type TopListRelativeInternalServerError
const TopListRelativeInternalServerErrorCode int = 500

/*TopListRelativeInternalServerError Server Error

swagger:response topListRelativeInternalServerError
*/
type TopListRelativeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewTopListRelativeInternalServerError creates TopListRelativeInternalServerError with default headers values
func NewTopListRelativeInternalServerError() *TopListRelativeInternalServerError {

	return &TopListRelativeInternalServerError{}
}

// WithPayload adds the payload to the top list relative internal server error response
func (o *TopListRelativeInternalServerError) WithPayload(payload string) *TopListRelativeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the top list relative internal server error response
func (o *TopListRelativeInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TopListRelativeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
