// Code generated by go-swagger; DO NOT EDIT.

package top

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AddPlayerHandlerFunc turns a function with the right signature into a add player handler
type AddPlayerHandlerFunc func(AddPlayerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddPlayerHandlerFunc) Handle(params AddPlayerParams) middleware.Responder {
	return fn(params)
}

// AddPlayerHandler interface for that can handle valid add player params
type AddPlayerHandler interface {
	Handle(AddPlayerParams) middleware.Responder
}

// NewAddPlayer creates a new http.Handler for the add player operation
func NewAddPlayer(ctx *middleware.Context, handler AddPlayerHandler) *AddPlayer {
	return &AddPlayer{Context: ctx, Handler: handler}
}

/* AddPlayer swagger:route POST /add/score/playerId/{playerId}/score/{points}/isRelative/{isRelative} top addPlayer

Add a player score

It adds a player score

*/
type AddPlayer struct {
	Context *middleware.Context
	Handler AddPlayerHandler
}

func (o *AddPlayer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddPlayerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
